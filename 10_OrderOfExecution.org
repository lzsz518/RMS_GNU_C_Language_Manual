#+Title: 10 执行顺序

* 10 执行顺序

C语言程序的执行顺序并不总是显而易见的，并且是不可预测的。本章将介绍这其中有什么是你可以信任的。

** 操作数的重新排序

C语言并不总是按照表达式在代码中出现的顺序去执行它们。例如下面的表达式：
#+begin_src c
  foo () + bar ()
#+end_src
foo和bar都有可能先被执行。如果foo先更新了数据集然后bar使用了它们那么表达式的执行结果将是不可预测的。

当表达式含有赋值操作时那么它也会使子表达式的计算顺序变得不可预测。我们之间就看过一个坏的的例子：

#+begin_src c
  x = 20;
  printf ("%d %d\n", x, x = 4);
#+end_src

第二个参数x的只完全依赖第三个参数执行赋值的先后顺序。

** 关联性和排序

当重复使用关联二元操作符时可以关联任意数量的操作数，例如'+'。这些被关联的操作数可能以任何顺序进行计算。

如果数值时整数并且溢出可以被忽略，那么他们可以任何顺序进行结合。因此，调用四个返回值是无符号整数的函数
并将他们相加，最后结果可能以任何计算顺序得出：

#+begin_src c
  (foo () + bar ()) + (baz () + quux ())
#+end_src

对比之下，带有溢出的有符号整数的算数运算并不真正具有关联性(详见整数溢出章节)。因此，加法必须使用小括号
指定向左关联的执行顺序。
