#+title: 09 二元运算符语法

拥有两个操作数的运算符是二元操作符，一个操作数在运算符左边另一个在右边。

C语言中所有的二元运算符在句法上都是向左结合的。这意味着 a /op/ b /op/ c 相当于 (a /op/ b) /op/ c。
然而，你应该只在使用 '+'，'-'，'*'，'/' 时不需要使用小括号，因为它们的优先级在代数里已经很明确了。
所以 a + b + c 或 a - b - c是没问题的，但决不要写 a =
= b == c 或 a % b % c 。

每一个C语言运算符都拥有优先级，优先级的作用是在语法上决定多种运算符的执行顺序。优先级最高的操作将
首先获取操作数；这些表达式之后成为优先级较低的运算符的操作数。

C语言中的运算符优先级是完全明确的，所以任何运算符的组合都会有良好的匹配。我们这里只说明一部分运算符的先级，
因为依赖未说明的运算符的优先级书写代码C语言代码不是良好的习惯。对于本章未提到的优运算符请使用小括号明确
配对关系。

你可以信赖下面序列的运算符优先级(从高到低排序)

 1.  字段访问('.' 和 '->')。
 2.  一元前缀运算符。
 3.  一元后缀运算符。
 4.  乘法，除法，求余运算符(它们优先级相同)。
 5.  加法和减法运算符(它们优先级相同)。
 6.  比较运算符--请小心使用！
 7.  逻辑运算符 '&&' 和 '||'--请小心使用！
 8.  '?' 和 ':' 组成的条件表达式。
 9.  赋值。
 10. 顺序执行(逗号运算符)。

上面有两行提到“请小心使用！”，这意味着那两行所提到的运算符的优先级有着非常微妙的区别。绝不要以来C语言的语法
来决定如何配对比较运算符，永远使用小括号来指定它们的结合关系。

你可以让一些'&&'或'||'运算符自由结合，但是总是使用小括号来指定'&&'和'||'如何结合。(详见逻辑运算符)。

下面是另外一些代码可以信赖的运算符优先级：

 1.  一元前缀运算符。
 2.  位和移位运算符--请小心使用！
 3. '?' 和 ':' 组成的条件表达式。

位运算符和移位运算符的注意事项与逻辑运算符的注意事项一样：你可以让多个位运算符自由结合起来，
但一定要用括号来控制不同运算符的配对。

这里没有指明第一个列表中的第8项与第二个列表中的第二项之间的优先级顺序，所以当它们在一起使用时请使用小括号
指明配对关系。(详见位操作)
