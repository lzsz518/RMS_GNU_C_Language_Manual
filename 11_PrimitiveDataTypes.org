#+title: 基本数据类型

本章将讲述C语言的所有基本数据类型，即所有不是从其他数据类型构建起来的类型。这其中就包括
之前章节涵盖过的 *int* 和 *double* 类型。

这些类型都是由字节组成的。

** 整数类型(Integer)

本节讲述说有整数类型和它们的基本特性。若要从比特级更多的了解整数数据的呈现和算术请参考
深入整数章节。

*** 整数基础

C语言中的整形数据可以是有符号或无符号的。无符号类型只能呈现整数和零。有符号类型可以呈现
正数和负数，它们的范围是以零为中心正负数绝对值几乎相同的一个区间。

除了整数的符号以外，整数数据类型的大小各不相同：它们一共有多少个字节。字节数决定该类型
可以存储多大的整数值。

下面的列表是有符号整数数据类型和它们所拥有的字节数。它们都有与其对应的无符号数。
详情请见有符号和无符号类型章节。

*signed char*

    1个字节(8比特位)。这种整数类型主要用于代表字符的整数，作为数组或其他数据结构的一部分。

*short*
*short int*

    2个字节(16比特位)。

*int*

    4个字节(32比特位)。

*long*
*long int*

    4字节(32比特位)或8字节(64比特位)，根据不同的平台而定。通常，在32位计算机上是32位，
    在64位计算机上是64位，但也有例外。

*long long*
*long long int*

    8字节(64比特位)。GNU C在1980年代开始支持此类型，国际标准化组织(ISO)在1999年的
    C99标准中开始支持此类型。

当你使用long或short时，你可以省略int。这是无害和惯用的。

*** 有符号与无符号类型
无符号类型只能呈现整数和零。有符号类型可以呈现正数和负数，它们的范围是以零为中心正负数
绝对值几乎相同的一个区间。比如说， *unsigned char* 可以容纳的数值从0到255(在大多数计算机中)，
而 *signed char* 可以容纳的数值从-128到127。每个类型都可以容纳256个不同的数值，因为它们
都是8比特位宽。

在类型关键字之前使用 *signed* 或 *unsigned* 可以指定类型是有符号或无符号的。然而，除了
*char* 之外的整数类型都是默认有符号的，对他们使用 *signed* 是没有意义的。

普通 *char* 可以是有符号或无符号的；这取决于编译器、使用的机器和其操作系统。

在许多程序中，char是否有符号并无区别。当符号确实重要时，不要让编译器决定，请明确使用
*signed char* 或 *unsigned char* 。

*** 窄整数

