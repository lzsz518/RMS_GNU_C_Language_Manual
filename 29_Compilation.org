#+title: 编译

在前面的章节，我们解释了如何编译一个由单个源文件组成的简单C程序（请参见编译示例）。
但是，我们只是以这种方式处理简短的程序。典型的C程序由许多源文件组成，
每个源文件都是一个独立的编译模块，这意味着它必须单独编译。

有关如何使用GCC编译的完整详细信息在xxxx中有文档记录。在这里，我们只提供一个简单的介绍。

以下是编译两个编译模块foo.c和bar.c的命令，每个模块都有一个命令：

#+begin_src c
gcc -c -O -g foo.c
gcc -c -O -g bar.c
#+end_src

在这些命令中，-g 表示生成调试信息，-O 表示进行一些优化，-c 表示将该模块的编译代码放入相应的目标文件中，
然后不再继续。foo.c的目标文件称为foo.o，以此类推。

如果需要，您可以指定额外的选项 -Wformat、-Wparenthesis 和 -Wstrict-prototypes，它们会请求额外的警告。

将大型程序分成多个编译模块的一个原因是控制每个模块如何访问其他模块的内部。
当一个模块声明一个函数或变量为extern时，其他模块可以访问它。模块中的其他函数和变量无法从该模块外部访问。

使用多个模块的另一个原因是，修改一个源文件不需要重新编译所有源文件，以尝试修改后的程序。
以这种方式将大型程序划分为许多实质性的模块通常会加快重新编译的速度。

在编译所有程序模块后，为了运行程序，您必须将目标文件链接成一个合并的可执行文件，如下所示：

#+begin_src c
gcc -o foo foo.o bar.o
#+end_src


在这个命令中，-o foo 指定了可执行文件的文件名，其他参数是要链接的目标文件。
在生成可执行文件的命令中，始终指定可执行文件的名称。

通常情况下，我们不直接运行这些命令。相反，我们为程序编写一组make规则，
然后使用make程序仅重新编译需要重新编译的源文件。


