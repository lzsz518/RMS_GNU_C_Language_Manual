#+title: 08 执行控制表达式

* 执行控制表达式

本章介绍一种通过组合表达式来控制哪些表达式将被执行或以什么顺序执行。

** 逻辑运算

/逻辑运算/ 组合逻辑值，逻辑值在C语言中以数字的形式出现。任何具有数值的表达式都是有效的逻辑值：
0代表假，其余值代表真。指针类型也是有意义的逻辑值；空指针(0)代表假，非空指针代表真。(详见指针章节)
逻辑运算的值总是int类型的1或0。(详见整数章节)

逻辑运算主要作为if语句的条件使用，或者用来判断for与while语句是否应该结束。(详见语句)
然而，它们在任何允许整数值表达的情况下都是有效的。

'! exp'

  一元逻辑运算符“非”。如果exp的值是0那么表达式为真，反之为假。
  *注意* ：如果exp是左值或函数调用那么应该使用小括号包裹它。

'left && right'

  二元逻辑运算符"与"将计算left并且在必要时计算right。如果left和right都是真那么“与”表达式的值
  为真(1)，否则值为假(0)。当计算left为假时它将决定整个表达式为假，所以right不需要再被计算。

'left || right'

  二元逻辑运算符“或”将计算left并且在必要时计算right。如果left和right中任意一个为真(1)那么
  表达式的值为真(1)，否则值为假(0)。当计算left为真时它将决定整个表达式为真，所以right不需要再被计算。

  *注意* ： 绝不要以来“&&” 和 “||” 的优先级。当它们在一起使用时总是使用小括号来确定他们的结合顺序。例如：

#+begin_src c
  if ((r != 0 && x % r == 0)
      ||
      (s != 0 && x % s == 0))
#+end_src

** 逻辑运算与比较

逻辑运算符经常被用来进行比较。'&&' 和 '||'的优先级低于比较运算符和算术运算符。所以我们在书写表达式的时
省略使用小括号让表达式自己匹配执行顺序是很自然的事情。两个比较运算必须都为真：

#+begin_src c
  if (r != 0 && x % r == 0)
#+end_src

上面的例子展示了如何使用'&&'低优先级特性来保证如果左边操作数为假时忽略右边的操作数。因此这段代码永远不会
出现除以0的情况。

这等价于：

#+begin_src c
  if (r && x % r == 0)
#+end_src

逻辑值是一个简单的数字，所以r作为一个真值来测试它是否为零。但是r实际上并不是一个逻辑值--它时一个除数。
所以最好使用明确指定它不等于的代码风格(!= 0)。

这里是另外一个等价的形式：

#+begin_src c
  if (!(r == 0) && x % r == 0)
#+end_src

这说明了一元'!'运算符，以及在其操作数周围写括号的必要性。
