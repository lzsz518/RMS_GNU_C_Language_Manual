#+TITLE: 第一个例子

* 第一个例子

本章使用一个非常简单的例子来解释一些C语言的特征。如果你已经了解了C语言的基本概念便可以跳过本章。

** 例子：斐波拉契数列的递归式

让我们从一个结果为整数的简单数学函数开始介绍C语言的基本特征。这个函数将计算一个每一项都是前两项
的和的数列，这个数列被称为斐波拉契数列，例如1,1,2,3,5,8,13,21,34,55,.....

#+begin_src c
    int
    fib (int n)
    {
        if(n <= 2)
            return 1; /* 防止无限递归 */
        else
            return fib (n -1) + fib (n-2);
    }
#+end_src

C语言的若干特征都呈现在这个简单的例子中:

- 函数定义，例子的前两行。
- 参数 n, 第二行中两个括号之间的变量定义。当定义函数时使用形式参数在调用与被调用函数之间传递实际数值。
- 算术。C语言使用‘+’ 和 ‘-’符号表示加法和减法。
- 数值比较。操作符 ‘<=’ 被用来判断小于等于。
- 使用10进制表示整数。
- 函数调用。 *fib* (n - 1)相当于调用函数fib并将n-1作为参数值传递给fib.
- 注释，在‘/*’ 和‘*/’
之间的内容。注释不会对程序运行产生影响。写注释的目的是便于他人阅读程序。在源代码中包含注释是极其重要的，注释提供了代码的背景信息以助于他人更快的理解代码。
- 两种语句，return 语句和 if...else语句。
- 递归。函数 *fib* 调用了它自己；这种形式的函数调用被称为递归调用。递归在C语言中是被允许的并且很常用。

函数 *fib* 如果不停的调用自己而不再某一时刻返回计算结果那么它将是一无是处的，所以定义递归函数时必须避免
无限递归。

函数 *fib* 中使用n是否小于或等于2作为递归终止的条件，所以最大递归次数是小于n的。


*** 函数头

在我们的例子中，使用前两行定义了函数头。函数头的目的是给函数一个在调用时使用的名字和如何调用它。

#+begin_src c
    int
    fib (int n)
#+end_src

上述代码定义了一个名叫 *fib* 并返回一个整数并且使用整数类型变量n作为实际参数数值传递的函数。

*** 函数体

函数定义中除去函数头剩下的部分被称为函数体。C语言的函数体必须写在一对大括号“{}”之间，函数体
可以为空或多行语句和声明。语句用来实现函数的功能，声明用来定义变量和函数的名称等。每一个语句和
生命都以分号";" 作为结束符。


语句和声明中可能含有 *表达式*; 表达式是是一种对数据进行求值的结构，也可能对后续的执行产生影响。
对比之下，语句并不含有值，它只通过它的功能来影响程序的后续执行。

这个函数的函数体不包含声明，并且只有一条复杂的嵌套语句。这条嵌套语句中包含一下两种语句：
+ return

  return 语句让函数立即终止执行。类似:
  #+begin_src c
    return value;
  #+end_src

  上述代码的意义是对表达式求值并终止函数执行，例如：
  #+begin_src c
     return 1;
  #+end_src
  终止执行并返回整数1给调用者
  #+begin_src c
    return fib(n - 1) + fib(n - 2);
  #+end_src
  终止执行并返回两次函数调用产生的结果(整数)的和。

+ if...else

  if...else 被称为条件语句。每当条件语句执行其将选择执行其后两个语句段中的一段并忽略另一段。例如：
  #+begin_src c
    if (condition)       /*条件表达式*/
      if-true-statement  /*表达式的值为真执行这段*/
    else
      if-false-statment  /*表达式的值为假执行这段*/
  #+end_src

  此if...else语句中的 /条件(condition)/ 表达式很简单，其只考虑结果是否为真(true),即是否是一个非零值。
  (对于 n <= 2 这样的比较操作表达式，其只会产生数值1或者0。当变量n中的数值小于等于整数2的时候结果为"真"(1)，
  否则为"假"(0)) 因此:
  #+begin_src c
    if(n <= 2)
      return 1;
    else
      return fib(n - 1) + fib(n - 2);
  #+end_src

  以上代码的第一行将判断n是否小于等于2.如果是n <= 2 为1 那么执行
  #+begin_src c
    return 1;
  #+end_src
  否则执行
  #+begin_src c
    return fib(n - 1) + fib(n - 2);
  #+end_src
  上面每一段语句都将终止当前函数的执行并返回一个数值。

当使用C语言的整型(int)变量计算并存储斐波拉契函数(fib)时其最多只能计算到数列的第46项，因为当n等与47时将产生
一个超出整型变量存储范围的整数。在程序的递归过程中fib(46)+fib(45)将返回一个不正确的数值，对于这种情况我们
将其称为 /整数溢出/ 。

很多种情况都会导致溢出，但是正确使用符合变量类型所能存储最大最小范围的数值可以很好的避免数值溢出。

** 栈和栈溢出

递归程序有个缺点: 程序可递归的次数会受到占内存大小的限制。在C语言中，每次函数调用都会从内存中分配一小块内存以
供被调用函数使用知道被调用函数调用return语句才会释放这部分内存。C语言会从一块被称为栈的连续内存区域来给被调用
函数来分配内存，所以这些分配给被调用函数的小内存块被称为栈帧。

栈的大小是有限制的，如果程序试图从中分配太多帧那么会导致栈内存被填满而运行失败，可以把这种情况称为栈溢出。

在GNU/Linux操作系统上如果发生栈溢出那么会产生一个名叫SIGSEGV的信号，也可以称为“段错误”。默认的，如果SIGSEGV
信号被操作系统收到那么会立即终止产生该信号的程序而不是试图修复它或等待程序继续运行直到结束。(一般情况下称这种情况
为程序“崩溃”)

使用计算足够长位数斐波拉契数列的函数并不能很方便的观察到栈溢出，这个函数在崩溃之前会运行很长时间。这个算法虽然简单
但是慢的离谱: 在计算第n位斐波拉契数列的函数fib(n)中，fib(1)或fib(2)被调用的次数和第n位斐波拉契数列的数值是相同的。
(由于递归式并不存储中间结果，所以对于使用递归式计算第n位的斐波拉契数列相当于每次都把n位之前的数列重新计算了一次，
所以当n比较大时最终实际的计算次数会接近n^2，这在效率最差的算法。译者注)

所以，为了观察栈溢出请使用以下函数作为替代：

#+begin_src c
  int
  fill_stack (int n)
  {
    if (n <= 1)  /* 此处限制递归深度  */
      return 1;
    else
      return fill_stack (n - 1);
  }
#+end_src

在使用gNewSense GUN/Linux的龙梦逸珑型电脑上，在不经过优化和使用默认配置的情况下运行以上程序将在第261907次h递归时崩溃。
在其他平台上这个数字可能会有所不同。

*** 例子： 迭代式斐波拉契函数

这里有一个速度更快的斐波拉契数列计算函数。之所以快是因为第一，它使用了迭代(重复或循环)而不是递归，迭代不会产生大量的函数调用。第二，因为只进行n次计算。

#+begin_src c
int
fib (int n)
{
  int last = 1;   /* 初始化第一项.  */
  int prev = 0;   /* 初始化第二项的控制变量  */
  int i;

  for (i = 1; i < n; ++i)
    /* 如果n小于等于1那么循环不会被执行，  */
    /* 因为执行第一次迭代时i < n 的值为假.  */
    {
      /* 现在last 是fib(i)
         而prev 是 fib(i-1)  */
      /* 计算 fib (i + 1).  */
      int next = prev + last;
      /* 将数值后移.  */
      prev = last;
      last = next;
      /* 现在 last 是 fib (i + 1)
         而 prev 是 fib (i).
         但这种情况不会持续很久,
         因为下一次迭代即将开始.  */
    }

  return last;
}
#+end_src
