#+title: 函数定义

我们已经在很多例子中呈现了函数定义，如果你已经阅读到了这里那么你已经基本理解了函数的概念。
尽管如此，使用一整章的篇幅来汇集有关函数的信息仍然使必要的。

* 函数定义

我们已经在很多例子中呈现了函数定义。函数定义的规则总体看开如同下面的例子：

#+begin_src c
    returntype
    functionname (parm_declarations…)
    {
      body
    }
#+end_src

大括号之前的部分被称为函数头。

如果函数没有返回值则使用 /void/ 作为 /returntype/ 。

** 函数参数变量


函数参数变量是在函数内部使用的局部变量（请参阅局部变量），用于存储在调用函数时作为参数传递的值。通常我们简称为“函数参数”或者“参数”，不特别提到它是一个变量的事实。

我们在函数定义的开头，在参数列表中声明这些变量。例如，

#+begin_src c
    fib (int n)
#+end_src

以上函数的参数列表中只有一个参数类型为int的参数--n。

函数参数声明与普通变量声明在几个方面有所不同：

+ 在函数定义的头部，逗号分隔参数声明，每个参数都需要完整的声明，包括类型。例如，如果一个函数 foo 有两个 int 参数，可以这样写：

  #+begin_src c
    foo (int a, int b)
  #+end_src

  你不能在这两个声明之间共享相同的 int 声明：

  #+begin_src c
    foo (int a, b) /* Invalid! */
  #+end_src

+ 函数参数变量在函数调用时被初始化为传递的值，因此它的声明不能指定初始值。

+ 在函数参数声明中写入数组类型会使其声明为指针。指定的数组大小没有任何影响，通常我们省略大小。因此，

  #+begin_src c
    foo (int a[5])
    foo (int a[])
    foo (int *a )
  #+end_src

  是等价的。

+ 参数变量的作用域是整个函数体，尽管它们写在函数头部，而函数头部实际上是在函数体的外部。

  如果一个函数没有参数，那么在其定义中，参数列表为空是最自然的方式。但是，在C语言中，由于历史原因，这样做有着特殊的含义：
  “函数调用时不检查其是否拥有正确的参数个数”。因此，

  #+begin_src c
    int
    foo ()
    {
      return 5;
    }

    int
    bar (int x)
    {
      return foo (x);
    }
  #+end_src

  在将 x 作为参数传递给 foo 时，不会报告编译错误。相比之下，

  #+begin_src c
    int
    foo (void)
    {
      return 5;
    }

    int
    bar (int x)
    {
      return foo (x);
    }
  #+end_src

  将会报告一个错误，因为 foo 不应该接收任何参数。
