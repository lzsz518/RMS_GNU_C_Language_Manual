#+Title: 14 指针

在高级计算机语言之中，C语言的抽象程度较低并且可以更直接的操作计算机硬件，这主要是因为它拥有显式的指针。
指针变量的值是一个数据在内存中的地址，这个地址中所存储的数据的类型是由持有这个地址的指针的类型决定的。
可以使用一元操作符'*' 获取指针指向的内存地址的数据，这个操作被称为指针解引用。

C语言也允许指针指向函数，但是这与指向数据的指针有所不同所以我们晚些讨论这个问题。详见函数指针章节。

* 数据地址

获取指针最简单的方法是使用"取地址" 操作符 *'&'* 。让我们假设为本拥有一下变量：

#+begin_src
  int i;
  double a[5];
#+end_src

现在， *&i* 将得到变量 *i* 的地址--一个指向 *i* 的内存地址的指针， *&a[3]* 将得到数组 *a* 索引为3的元素
的内存地址。(实际上索引为3的元素是数组的第四个元素，因为索引是从0开始计数的)

取地址操作符并不常见因为它只对存储数值的地方(内存地址，左值。详见左值章节)进行操作而不是那个地址中所存储的数值。
(简单赋值的左参数以同样的原因不常见.) 你可以在任何期望得到位域或(详见位域章节)构造器的地方使用它。(详见结构体构造器)

* 指针类型

每一个数据类型 /t/ 都有对应的指针类型。对于以下变量：

#+begin_src c
  int i;
  double a[5];
#+end_src

 * 变量 *i* 是 *int* 型； 我们可以是说 *&i* 是一个"直指向int的指针"。
 * 变量 *a* 是double[5]型； 我们可以说 *&a* 是一个"指向拥有五个double元素数组的指针"。
 * 变量 *a[3]* 是double型；我们可以说 *&a[3]* 是一个"指向double的指针"。

* 声明指针变量

将变量 *foo* 声明为 /t/ 类型的指针的方法是：

#+begin_src c
  t *foo;
#+end_src

为了便于记忆，请这样理解："如果使用解引用操作符 *'*'* 解引用变量 *foo* ，你将得到它的类型 /t/ , 因此
*foo* 是指向 类型 /t/ 的指针。"

因此我们可声明指针变量来存储以下三个类型变量的地址：

#+begin_src c
  int *ptri;            /* Pointer to int. */
  double *ptrd;         /* Pointer to double. */
  double (*ptrda)[5];   /* Pointer to double[5]. */
#+end_src

*'int *ptri;'* 的意思是："如果解引用 *ptri* 将得到一个int类型的变量"。 *'double (*ptrda)[5];'*
的意思是："如果解引用 *ptrda* 之后便可以使用小于5的索引来使用它以得到一个double类型的数值"。小括号
的作用是使变量 *ptrda* 可以先被解引用然后再引用其中的元素。

对比上面最有一个语句与以下语句：

#+begin_src c
  double *aptrd[5];     /* Array of five pointers to double. */
#+end_src

因为 *'*'* 在句法上的优先级比下标([5])更高，你必须先进行下标引用才能解引用 *aptrd* 。因此，上面的
声明是一个指针数组而不是一个指针。

* 指针类型指定器

C语言中的每种变量类型都有类型指定器；你可以通过从变量声明中删除变量名和分号来得到它(详见变量指定器章节)。
下面是前面章节出现过的变量声明中的指针类型指定器：

#+begin_src c
  int *           /* Pointer to int. */
  double *        /* Pointer to double. */
  double (*)[5]   /* Pointer to double[5]. */
#+end_src

请记住，想知道一个类型的指定器将指定变量为什么类型，请想象一下声明中的变量名并且研究清楚变量被声明为什么类型。
double(*)[5]只能作为 double(*variable)[5]的指定器，所以在对他进行解引用后会得到一个指向5个double元素数组
的指针。

* 解引用指针

指针的主要用途是使用一元操作符'*'对它进行 /解引用/ (访问指针所指的数据)。例如，*&i是变量i所在地址的值，这就是
i本身，它们两个是等价的，这也证明了&i是可用的。

指向数据的指针解引用表达式(不能是指向函数的指针)是一个左值。

指针的真正作用是把他们存储起来并在晚些时候使用。以下是一个简单的例子对此进行说明：

#+begin_src c
  {
    int i;
    int *ptr;

    ptr = &i;

    i = 5;

    …

    return *ptr;   /* Returns 5, fetched from i.  */
  }
#+end_src

上例展示了如何声明变量ptr为 int * 类型(指向int的指针)，存储一个指针值到prt中(变量i的内存地址)，然后稍晚时候使用
这个指针来取得它所指向地址中所存储的数值(变量i的数值)。

如果任何人能提供一个比这还基础的例子我将万分感谢。

* 空指针

指针的值可以是 /空/ /(null)/   ，它的意义是指针不指向任何对象。取得一个空指针最便捷的方式是使用空定义 *NULL*，
它被定义在 *stddef.h* 头文件中。你也可以通过将数值0类型转换到你希望使用的指针的类型来得到，例如 (char *) 0。
(类型转换操作符将执行显式类型转换；详见显式类型转换章节)

空指针可以存储到任何可以作为左值的数据类型的指针变量中：

#+begin_src c
  char *foo;
  foo = NULL;
#+end_src

以上两个语句可以被组合成一条带初始化的声明语句：

#+begin_src c
  char *foo = NULL;
#+end_src

也可以显式转换 *NULL* 到相应的指针类型--但是这与直接赋值没有任何不同。

#+begin_src c
  char *foo;
  foo = (char *) NULL;
#+end_src

要检测一个指针是否为空，可以将其与0或者NULL进行比较：

#+begin_src c
  if (p != NULL)
    /* p is not null.  */
    operate (p);
#+end_src

因为检测一个指针是否为空是非常基础并常见的，所以初学者以外的人都应该明白在C语言的比较语句中并不需要 != NULL ：

#+begin_src c
  if (p)
    /* p is not null.  */
    operate (p);
#+end_src

* 空指针解引用或非法指针

试图解引用一个空指针是错误的。在大多数操作系统中这样的操作将产生一个信号，通常是 *SIGSEGV* (详见信号章节)

#+begin_src c
  char *foo = NULL;
  c = *foo;    /* This causes a signal and terminates.  */
#+end_src

同样的情况也发生在指针指向错误对齐的目标数据类型(计算机的大多数类型)，或指向未被分配给指针所在的进程(程序)的地址空间。

上述操作所触发的信号将终止正在运行的程序，除非程序有针对这个信号进行处理的部分
(详见[[https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Handling][GNU C 库函数参考手册]])

然而，终止程序的信号有可能在某些进行过优化的情况下不会被触发。在上面的例子中，如果随后并不使用变量 *c* 那么GNU C 语言
编译器可能会在编译程序的时候将 **foo* 优化掉(不出现在被编译后的机器码中)。你可以通过使用 *volatile* 来阻止编译器对
这种情况进行优化，例如：

#+begin_src c
  volatile char *p;
  volatile char c;
  c = *p;
#+end_src

上例可以被用来测试指针 *p* 是否被分配了内存，但是请先准备好处理操作系统信号的代码以防程序被终止。

* 无类型指针

*void** 是一个奇特的类型，它代表一个指针的类型是 *void* (无类型), 这在C语言中是很常见的。它表示一个我们不知道其所指向数据的类型的指针。
因此：

#+begin_src c
  void *numbered_slot_pointer (int);
#+end_src

定义了函数 *numbered_slot_pointer* ，这个函数拥有一个整型参数和返回一个指针，但是我们不指明这个指针所指向的数据的类型。

使用 *void** 时，你可以传递一个指针并且测试它是否为空。但是解引用后得到的void类型数值是不可用的(详见未定义章节)。
在解引用之前需要先将无类型指针。

如果赋值操作左边的操作数拥有类型那么赋值将自动转换无类型指针转换到左边的指针类型；例如：

#+begin_src c
  {
  int *p;
  /* Converts return value to int *. */
  p = numbered_slot_pointer (5);
  . . .
  }
#+end_src

*void** 作为实参类型传递时也会被转换为形参的类型。例如，假设 *hack* 被声明为一个需要 *float** 类型参数的函数，下面的代码将
把五类型指针转换为 *float** 类型：

#+begin_src c
  /* Declare hack that way.
  We assume it is defined somewhere else. */
  void hack (float *);
  Chapter 14: Pointers 72
  ...
  /* Now call hack. */
  {
  /* Converts return value of numbered_slot_pointer
  to float * to pass it to hack. */
  hack (numbered_slot_pointer (5));
  . . .
  }
#+end_src

也可以使用显式类型转换将五类型指针转换为其它类型，例如：

#+begin_src c
  (int *) numbered_slot_pointer (5)
#+end_src

下面是一个程序运行时指针类型如何决定转换为其他类型的例子：

#+begin_src c
  void
  extract_int_or_double (void *ptr, bool its_an_int)
  {
    if (its_an_int)
      handle_an_int (*(int *)ptr);
    else
      handle_a_double (*(double *)ptr);
    }
#+end_src

表达式 * (int*) 的意思是将指针 *ptr* 转换为 *int** 类型然后解引用它。

* 指针比较

如果两个指针指向同一个地址那么他们的值相等，或者他们都是null。你可以使用 == 和 != 进行测试，例如下面这个小例子：

#+begin_src c
  {
  int i;
  int *p, *q;
  p = &i;
  q = &i;
  if (p == q)
  printf ("This will be printed.\n");
  if (p != q)
  printf ("This won’t be printed.\n");
  }
#+end_src

使用顺序比较操作符例如 > 和 >= 对指针进行比较那么指针会被转换为无符号整数类型。C语言标准规定只有当两个指针指向同一个内存对象时它们才相等，
但是在 GNU/Linux 系统中只是简单比较指针变量中的数值。

理论上比较两个指针时它们应该拥有相同的类型，但是在一些特定条件下允许它们是不同的。首先，如果两个指针所指向的数据类型是兼容的(详见兼容类型章节)，
那么比较是允许的。

如果一个操作数是 *void ** 类型(详见无类型指针章节)而另外一个操作数是其他类型那么比较操作符会先将 *void ** 类型指针转换为另外一个指针的类型
然后再比较它们。(在标准C语言中这是不允许的，但是 GNU C中没有问题)

比较操作符也允许整数0与一个指针进行比较。原理是比较操作符会将0转换为与另一个操作数类型相同的空指针。

* 指针算术

将指针与一个整数相加(正整数或负整数)在C语言中是合法的。指针的算术运算假设指针指向数组中的一个元素，那么将它与整数相加时会将指针向前或
向后移动那个整数的数值个元素。下面的例子展示如何通过将指针与一个整数相加来实现指针移动到数组中下标更大的元素：

#+begin_src c
  void
  incrementing_pointers ()
  {
    int array[5] = { 45, 29, 104, -3, 123456 };
    int elt0, elt1, elt4;

    int *p = &array[0];
    /* Now p points at element 0.  Fetch it.  */
    elt0 = *p;

    ++p;
    /* Now p points at element 1.  Fetch it.  */
    elt1 = *p;

    p += 3;
    /* Now p points at element 4 (the last).  Fetch it.  */
    elt4 = *p;

    printf ("elt0 %d  elt1 %d  elt4 %d.\n",
            elt0, elt1, elt4);
    /* Prints elt0 45  elt1 29  elt4 123456.  */
  }
#+end_src

下面的例子展示如何通过将指针与一个负整数相加来实现指针移动到数组中小标更小的元素：

#+begin_src c
  void
  decrementing_pointers ()
  {
    int array[5] = { 45, 29, 104, -3, 123456 };
    int elt0, elt3, elt4;

    int *p = &array[4];
    /* Now p points at element 4 (the last).  Fetch it.  */
    elt4 = *p;

    --p;
    /* Now p points at element 3.  Fetch it.  */
    elt3 = *p;

    p -= 3;
    /* Now p points at element 0.  Fetch it.  */
    elt0 = *p;

    printf ("elt0 %d  elt3 %d  elt4 %d.\n",
            elt0, elt3, elt4);
    /* Prints elt0 45  elt3 -3  elt4 123456.  */
  }
#+end_src

在C语言中如果一个指针的值是通过另一个指针与一个整数相加得到的那么通过将这两个指针的值相减就可以得到那个整数。

#+begin_src c
  void
  subtract_pointers ()
  {
    int array[5] = { 45, 29, 104, -3, 123456 };
    int *p0, *p3, *p4;

    int *p = &array[4];
    /* Now p points at element 4 (the last).  Save the value.  */
    p4 = p;

    --p;
    /* Now p points at element 3.  Save the value.  */
    p3 = p;

    p -= 3;
    /* Now p points at element 0.  Save the value.  */
    p0 = p;

    printf ("%d, %d, %d, %d\n",
            p4 - p0, p0 - p0, p3 - p0, p0 - p3);
    /* Prints 4, 0, 3, -3.  */
  }
#+end_src

加法运算并不知道指针是否真正指向一个数组，它只是简单的将指针的值加上一个整数数值(加数需要乘以指针指向的对象的类型的字节数)。
当被加的指针和结果指针指向同一个数组时那么结果才是合法的。

*警告* ：只有专家才可以对涉及不同内存对象的指针进行算术运算。

两个指针的差可以是 *int* 型或 *long* 型(详见整数类型)。使用stddef.h文件中的宏定义 *ptrdiff_t* 来定义指针的差值类型是明智的方法。

指针减法的定义与指针与负整数的加法一致， *(p3 - p1) + p1* 等于 *p3* ，这符合基础代数。

在标准C语言中指针加法和减法不允许对 void * 类型指针使用，因为虚指针指向的对象的字节数是未知的。同样的，也不能对函数指针使用加减法。
然而这些在GNU C 中都是可行的，这些操作都将指针指向的对象的字节数视为1。

* 指针与数组

使用 *数组名[下标]* 的方式引用数组中的元素是最简单有效的方式。另一种较复杂的方式是将元素的地址作为一个指针然后解引用它：
*(&数组名[0] + 下标) (或 *(数组名 + 下标)。这种方式相当于首先获得数组中下标为0的元素(第一个元素)的指针然后将指针移动
到下标所指的元素然后解引用它。

在C语言中使用指针算术就如同使用方括号。 *a[b]* 被定义为 *(a + b)。这个定义中a与b成对出现，他们必须一个为指针另一个为
整数，但是无所谓先后顺序。

因为方括号与下标被定义为加法与解引用所以他们具有对称性。因此你可以写成 3[数组名]，这与 数组名[3]是等价的。然而傻子才会
写3[数组名]，这不但没有任何好处还会让其他读者感到困惑。

定义 *(a + b) 需要一个指针而 数组名[3]使用数组的值来代替，为什么可以这样做？ 当将数组名作为表达式使用时(除过在sizeof中)
那么它被视为指向数组中下标为0的元素(第一个元素)的指针。因此 数组名+3 先将 数组名隐式转换为 &数组名[0] 然后就可以得到下标
为3的元素，这等价与 &数组名[3]。

因为方括号被定义为加法，数组名[3] 先将数组名转换为指， 这就是为什么这种表达方式是合法的原因。

* 底层指针算术

原理上指针算术只能用于已经指向了被分配了合法空间的内存对象的指针。但是加法与减法操作无法得知指针是否真正指向了一个内存对象，
它们无法得知这个内存对象从哪里开始在那里结束，那么实际上它们是如何运作的？

指针 *p* 加上 整数 *i* 会将 *p* 视为一个内存地址--实际上就一个整数，我们称之为 /pint/ 。 *i* 被视为 *p* 指向数组的第i个元素
元素类型所占用的字节数： i * sizeof(*p)也应该参与计算。所以它们的和是一个整数： /pint + i * sizeof(*p)/ 。这个值会被重新
转换为一个与 *p* 类型相同的指针。

如果起始指针的值 /p/ 与结果并不指向同一个对象那么操作是非法的而且C语言并不"支持"这样做。但是即使你做了以而没人管，并且还可以根据
上面描述的规则得到明确的结果。在一些特殊的情况下这可以有些用处，但是如果你不是魔法师请不要这样使用。

以显示计算的方式，下面的函数将通过给与的字节大小来计算指针的偏移，如果这个指针指向的对象足够大：

#+begin_src c
  #include <stdint.h>
  void *
  ptr_add (void *p, int i, int objsize)
  {
  intptr_t p_address = (long) p;
  intptr_t totalsize = i * objsize;
  intptr_t new_address = p_address + totalsize;
  return (void *) new_address;
  }
#+end_src

这与 *p + i* 的效果相同。函数使用了 *stdint.h* 头文件中定义的 *intptr_t* 。(实际上， *long long* 总是可以被使用，
但是更明智的途径是使用 *intptr_t*)

* 指针的递增与递减

*'++'* 操作符的作用是使变量加1。我们在讨论整数的时候见过它们，它们同样试用于指针。例如：假设我们有一个以0结尾的正整数
数列并且我们希望对数列求和：

#+begin_src c
  int
  sum_array_till_0 (int *p)
  {
  int sum = 0;
  for (;;)
  {
  /* Fetch the next integer. */
  int next = *p++;
  /* Exit the loop if it’s 0. */
  Chapter 14: Pointers 77
  if (next == 0)
  break;
  /* Add it into running total. */
  sum += next;
  }
  return sum;
  }
#+end_src


*'break;'* 语句将在稍后章节进行解释(详见break语句章节)。在这里它的作用是立即退出 *for* 循环语句。

因为后缀操作符总是比前缀操作符优先级高所以*p++ 被解析为 *(p++)，意味着先解引用 p 然后再递增指针 p。('++'操作符在
操作数右边表示在这个操作数被使用之后再递增，所以这里先产生作用的是解引用)

变量递增的意义是这个变量加1，相当于 *p = p + 1* 。因为 *p* 是指针所以加1会使其值增加它所指向的数据的类型的宽度个数值
--在这个例子中是 *int* (指针的数值将增加 sizeof(int))。因此每次迭代都会选取数列中下一个整数并存储到 *next* 变量中。

这个 *for* 循环并没有初始化表达式因为 *p* 和 *sum* 都已经被初始化过了，它也没有终止条件因为 *'break'* 语句可以退出
循环，并且它也不需要表达式来推进迭代因为这是通过递增 *p* 和 *sum* 来实现的。所以 *for* 循环的三条语句都为空。

这个函数的另外一种写法是保持参数的值不变使用索引来访问数列中的元素：

#+begin_src c
  int
  sum_array_till_0_indexing (int *p)
  {
    int i;
    int sum = 0;

    for (i = 0; ; i++)
      {
        /* Fetch the next integer.  */
        int next = p[i];
        /* Exit the loop if it’s 0.  */
        if (next == 0)
          break;
        /* Add it into running total.  */
        sum += next;
      }

    return sum;
  }
#+end_src

在这个函数中使用递增 *i* 然后将其与 *p* 相加的方式来代替指针递增。(记住 *p[i]* 的意思是 *(p + i))。无论那种方式都
使用相同的地址来得到下一个整数。

在这个函数中使用 *i++* 或 *++i* 并没有什么不同，因为这个表达式唯一的作用就是将 *i* 加1。

'--'操作符也适用于指针，它可以反方向遍历一个数组，例如：

#+begin_src c
  int
  after_last_nonzero (int *p, int len)
  {
    /* Set up q to point just after the last array element.  */
    int *q = p + len;

    while (q != p)
      /* Step q back until it reaches a nonzero element.  */
      if (*--q != 0)
        /* Return the index of the element after that nonzero.  */
        return q - p + 1;

    return 0;
  }
#+end_src

该函数返回由其参数指定的数组的非零部分的长度； 也就是说，从第一个值为0的元素到数组结尾的长度。

* 指针算术的缺点

指针算术是简洁且优雅的，但它也是让C语言的安全性产生缺陷的主要因素。理论上只允许对指向已经被分配了内存的对象的指针
进行操作。然而，如果你无意中操作一个指针使其超越了内存对象的边界而进入另外一个内存对象那么系统是无法得知这个错误的。

这样错误的操作很容易导致破坏另一个对象的一部分。例如：使用数组名[-1]你可以存取一个并不属于数组的数据--可能是另一个
数据的一部分。

将指针算术与指针类型之间的转换相结合，你可以创建一个无法与其类型正确对齐的指针。 例如：

#+begin_src c
  int a[2];
  char *pa = (char *)a;
  int *p = (int *)(pa + 1);
#+end_src

给 *p* 一个指向"整数"的值，该整数包括 *a[0]* 的一部分和 *a[1]* 的一部分。 解引用 *p* 可能会导致致命的 SIGSEGV 信号，
或者它可能会返回错误对齐的 int 的值(详见阅信号)。如果它“有效”，它可能会非常慢。它还会导致别名混淆(请参阅别名)。

*警告* ： 使用不正确对齐的指针是有风险的——除非真的有必要，否则不要这样做。
