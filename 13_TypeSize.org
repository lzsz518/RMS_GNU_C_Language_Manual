#+title: 13 类型大小

* 类型大小

  每个数据类型都拥有固定的 /大小/ ，它表示这个类型的数据在内存中将占用多少字节。要在C语言程序中查看数据类型大小需要使用
  sizeof 关键字。有两种方式通过 sizeof 来得到类型大小：

  * sizeof expression

    根据表达式的类型得出其大小。这种方式并不计算表达式的值仅仅取得其大小，如果表达式中含有运算或函数那么它们将不会产生
    任何作用。因此，sizeof仅仅在编译时进行运算，并不会在运行时占用任何CPU时间。

    比特字段(详情请见比特字段章节)不被允许使用sizeof操作。

    例如：

    #+begin_src c
      double a;

      i = sizeof a + 10;
    #+end_src

    i的值在大多数计算机上将是18因为 a 占用8个字节。

    下面展示如计算一个数组有多少个元素：

    #+begin_src c
      (sizeof array / sizeof array[0])
    #+end_src

    表达式 sizeof array 将取得数组占用的字节数而不是指向这个数组的指针占用的字节数。然而如果sizeof array 表达式
    在一个被声明为数组的函数参数的位置那么它将变成指针类型(详见数组参数指针章节)，所以结果将会是数组指针的大小。

  * sizeof (type)

    这里展示如何计算类型大小，例如：

    #+begin_src c
      i = sizeof (double) + 10;
    #+end_src

    结果和上面的例子相同。

    sizeof 不能被使用在未完成的类型上(详情请见未完成类型章节)，也不能对void使用。在GNU C中对函数类型使用将得到返回值1，
    这将使函数指针可以与整数进行加法运算。(详情请见指针算术章节)

    *警告* : 当你将 sizeof 与类型而不是表达式一起使用时，必须在类型周围写上括号。

    *警告* ：将 sizeof 应用于强制转换的结果时（请参阅显式类型转换），您必须在强制转换表达式周围写上括号以避免 C 语法中的歧义。具体来说:

    #+begin_src c
      sizeof (int) -x
    #+end_src

    会被解析为：

    #+begin_src c
      (sizeof (int)) - x
    #+end_src

    如果你实际上希望实现以下效果那么必须使用括号

    #+begin_src c
      sizeof ((int) -x)
    #+end_src

    sizeof运算符返回值的数据类型总是无符号整数中的一种；具体是哪一种取决于不同的计算机。头文件stddef.h中定义了类型名size_t作为这种类型的别名。
    
