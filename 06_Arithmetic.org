#+title: 算术

* 算术运算

C语言中的算术运算符试图尽可能地类似于现实中的算术运算，但是不可能做到完全一样。计算机可以表示的数值都被
限定在一个范围内，并且对于非整数的数值在精度上也有一定的限制。尽管如此，在大多数情况下不必对使用'+'表示加法，
'-'表示减法，'*'表示乘法感到意外。

C语言的运算符都具有优先级--一种规定运算符在各种表达式中运算先后顺序的等级。优先级最高的运算符首先对相邻的
操作数产生作用；然后这些表达式将成为优先级较低的运算符的操作数。本章我们仅讨论本章所使用到的运算符的优先级，
对于全部运算符优先级的讨论请见二元运算符语法章节。

算数运算符在对其操作数产生作用之前总是先提升他们的域。这意味着总是转换表示较小范围的数据类型到较大范围的
数据类型。详情请见操作数提升章节。如果只是学习C语言那么可以暂时忽略这部分内容。


如果操作符有两个操作数那么总是将他们转换为 /公共类型/ 。例如：一个int 和一个 double变量在一起那么他们
的 /公共类型/ 就是 double(这是因为double可以表示int可以容纳的所有数值，但反之则不然）。详情请见公共类型章节。

** 基础运算

C语言中的基础算数通常是两个操作数的代数：加法（'+'），减法（'-'），乘法（'*'）和除法（'/'）。一元运算符'-'用于更改数字的符号。
'+'也可以作为一元操作符，但是它不会对操作数产生任何影响。

'/'是除法操作符，但是整数除法可能不会得到你所期望的值。当除法是一个分数时其值是整数但是不等于数学上的商。当有必要时使用'%'来取得
除法的余数。详情请见除法和余数章节。浮点除法产生的数值比较接近数学上的商数。

这些运算符使用现实中代数上的先乘除后加减的优先级规则(详情请见二元操作语法)，但是你可以使用小括号来指定他们的运算顺序。他们是向
左结合的，因此：

#+begin_src c
  -a + b - c + d * e / f
#+end_src

等价于

#+begin_src c
  (((-a) + b) - c) + ((d * e) / f)
#+end_src



