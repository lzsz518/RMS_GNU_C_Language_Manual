#+TITLE: 02 一个完整的程序

* 完整的程序

前面写了一个很棒的斐波拉契函数，它很有用但是不完整所以这个函数并不能在计算机上运行。

本章将展现一个计算斐波拉契数列第n项的完整计算机程序。展现的内容包括如何让一个程序开始，
结束和如何编译它并输入计算结果。

** 完整程序样例

现在来使用较简单的递归式斐波拉契函数来展现完整的程序：

#+begin_src c
  #include <stdio.h>
  int
  fib (int n)
  {
    if (n <= 2) /* This avoids infinite recursion. */
      return 1;
    else
      return fib (n - 1) + fib (n - 2);
  }

  int
  main (void)
  {
    printf ("Fibonacci series item %d is %d\n",
    20, fib (20));
    return 0;
  }
#+end_src

以上程序将打印斐波拉契数列第二十项的值。现在来解释这些代码的含义。

** 程序释义

这个简单的程序将打印 *fib(20)* 的值并返回整数0(程序执行成功时的标准返回值)

每一个C语言程序都将从 *main* 函数开始运行，无论 *main*函数具体做什么或整个程序
具体做什么，因此这个例子定义了它。

当程序启动时 *main* 函数将是第一个被调用的函数，但是在例子中它却没有被首先定义，
函数在源代码中的定义顺序对于程序的执行不会产生影响。

当程序开始执行时总是会传递特定的参数给 *main* 函数，但是 *main* 函数并不是必须
使用这些参数。为了忽略参数需要在参数列表中使用 *void* 关键字。(*void* 作为参数列表
意味着调用函数时不传递参数，但是 *main* 函数是个特例)

*main* 函数返回整数0是因为这是最传统的方式来表明函数执行成功，当程序执行失败时可以使用
其他的整数表明程序执行失败，一些实用程序会约定一些特定的返回数值来表明函数失败的原因。

在C语言中最简单的字符输出方式是调用 /printf/ 函数，我们来解释一下他的作用。

为了输出信息，/printf/ 函数的第一个参数是一个带有模板的字符串常量。 /printf/ 函数将
直接拷贝字符串常量中包括换行符在内的大部分内容并输出到 /标准输出/ 目标，目标通常是命令行
窗口。

模板字符串中的'%'用来指示 /printf/ 函数输出时使用其他字符串来代替它。具体而言，'%d'的
意思是使用/printf/ 函数的下一个参数作为一个十进制字符串并输出到'%d'的位置。(作为替换'%d'
的参数必须时整型)。因此输出效果为：Fibonacci series item 20 is 6765

C语言提供标准函数库以供用户程序调用， /printf/ 函数便被定义在其中所以本程序并不包含其定义。
然而，每个程序在调用之前也不需要 /声明/ printf函数。#include将起到声明的作用；它的作用是
把名叫 /stdio.h/ 的头文件导入到用户程序的源代码中。这个头文件是操作系统提供的，它包含很多标准
输入/输出函数， /printf/函数就是其中之一。

让我们暂时跳过头文件的讨论，其将在后续章节里展开。

/printf/ 函数的第一个参数并不一定需要是字符串常量，它可以是任意字符串。但是通常情况下使用字符串常量。

/printf/ 和其他标准库函数详情请见：[[https://www.gnu.org/software/libc/manual/html_mono/libc.html#Top][The
GNU CLibrary]]

** 逐行解释完整程序

一下是完整程序的逐行解释。读者们，你是否能从中得到帮助？如果你有不同的程序布局来书写这个例子请联系我：
rms@gnu.org

#+begin_src c
  #include <stdio.h>      /* 包含例如printf的标准输入输出库函数的头文件 */
  /* 大多数程序需要这个头文件  */

  int                     /* 函数返回值类型  */
  fib (int n)             /* 函数名  */
                          /* 参数n    */
  {                       /* 函数体开始  */
    /* 防止无限递归  */
    if (n <= 2)           /* 如果 n 是 1 or 2,  */
      return 1;           /* 返回 1  */
    else                  /* 否则相加前两项  */
      return fib (n - 1) + fib (n - 2);
  }

  int                     /* 函数返回值类型  */
  main (void)             /* 函数起点，忽略参数  */
  {                       /* 打印函数结果  */
    printf ("Fibonacci series item %d is %d\n",
    20, fib (20));
    return 0;             /* 终止程序，返回成功代码  */
  }
#+end_src

** 编译例子程序

为了运行程序必须将源代码转换成 /可执行/ 文件。这种操作被称作 /编译/。GNU C使用 /gcc/ 命令来编译源代码。

这个例子程序只包含一个源文件，假设这个源文件名叫fib1.c, 编译其的命令为：

#+begin_src
  gcc -g -0 -o fib1 fib1.c
#+end_src

上述命令中 -g 的意思是产生调试信息，-0 的意思是对程序进行最基础的优化，-o 的意思是生成的可执行文件名是
fib1。

这时就可以在命令行下运行这个程序了：

#+begin_src
  ./fib1
#+end_src

除非你确定你的程序完全正确，否则你会需要对其进行调试。调试的命令为：

#+begin_src
  gdb fib1
#+end_src

除非你确定你的程序完全正确，否则你会需要对其进行调试。调试的命令为：

#+begin_src
  gdb fib1
#+end_src
以上命令会启动GDB调试器让你可以运行并调试可执行程序fib1.(GDB调试器详情见[[https://www.cyberciti.biz/files/GNU-C-Language-Manual/GNU%20C%20Language%20Manual.html#The-First-Example][A
Sample GDB Session]]).

后续会在编译章节介绍如何编译更复杂的程序。
