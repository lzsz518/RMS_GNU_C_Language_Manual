#+Title: 15 结构体

/结构体/ 是一种用户自定义的数据类型，它可以拥有不同的 /字段/ 。结构体中的字段都拥有名字和类型。

下面我们为给链表排序定义一个合适的结构体。链表的项包含一个整数和一个指向下一项的指针。

#+begin_src c
  struct intlistlink
    {
      int datum;
      struct intlistlink *next;
    };
#+end_src

这个结构体拥有一个类型标签所以其他代码可以使用它来定义这个结构类型的变量。这里的类型标签是 *intlistlink* 。
上面的结构体使用类型标签进行了递归定义。

你可以定义一个结构体而不使用类型标签，但是定义之后便无法再使用它。这只有在一些特殊场合有用，例如在
*typedef* 和 *联合体* 中。

结构体中的内容是大括号中的字段。每个字段都需要声明。在定义结构体时每一个字段都需要有一个明确的名字，但是
这个名字不会与程序中的其它名字产生冲突。

字段声明看起来就像是变量声明。你可以使用与变量声明相同的命名规则声明字段。

以上结构体有用两个字段。一个叫 *datum* 类型是 *int* 并可以为链表保存一个整数，另一个叫 *next* 类型是指向
另一个 *struct intlistlink* 的指针，从这个指针可以找到剩余的链表项。链表的最后一项中的 *next* 的值应该是 *NULL* 。

这个结构体是一个递归定义，因为 *next* 的类型是 *intlistlink* 类型。这样的递归定义是没有问题的；事实上你可以在
struck intlistlink 定之前使用类型 struct intlistlink *。这是因为在机器码的层级指向所有结构体的指针都是基本相同的。

结构体被定义之后，你可以声明一个 *struct intlistlink* 类型的变量：

#+begin_src c
  struct intlistlink foo;
#+end_src

结构定义本身可以作为变量声明的开始，所以你可以紧接着它声明变量，像这样:

#+begin_src c
  struct intlistlink
    {
      int datum;
      struct intlistlink *next;
    } foo;
#+end_src

但是这看起来比较难看。将结构体的定义与使用它分开可以让代码看起来更清晰。

在代码块中声明结构体将会限制这个结构体的作用域仅仅存在于那个代码块中。这意味着这个结构体仅存在于那个代码块中。
在一个函数的参数列表中定义结构体：

#+begin_src c
  int f (struct foo {int a, b} parm);
#+end_src

(假设 *struct foo* 之前没被定义过) *struct foo* 的作用域仅限参数列表中；这没有任何用处所以会产生一个警告。

标准C语言需要结构体最少有一个字段，但是GNU C 没有这个限制。


