#+TITLE: 第一个例子

* 第一个例子

本章使用一个非常简单的例子来解释一些C语言的特征。如果你已经了解了C语言的基本概念便可以跳过本章。

** 例子：斐波拉契数列的递归式

让我们从一个结果为整数的简单数学函数开始介绍C语言的基本特征。这个函数将计算一个每一项都是前两项
的和的数列，这个数列被称为斐波拉契数列，例如1,1,2,3,5,8,13,21,34,55,.....

#+begin_src c
    int
    fib (int n)
    {
        if(n <= 2)
            return 1; /* 防止无限递归 */
        else
            return fib (n -1) + fib (n-2);
    }
#+end_src

C语言的若干特征都呈现在这个简单的例子中:

- 函数定义，例子的前两行。
- 参数 n, 第二行中两个括号之间的变量定义。当定义函数时使用形式参数在调用与被调用函数之间传递实际数值。
- 算术。C语言使用‘+’ 和 ‘-’符号表示加法和减法。
- 数值比较。操作符 ‘<=’ 被用来判断小于等于。
- 使用10进制表示整数。
- 函数调用。 *fib* (n - 1)相当于调用函数fib并将n-1作为参数值传递给fib.
- 注释，在‘/*’ 和‘*/’
之间的内容。注释不会对程序运行产生影响。写注释的目的是便于他人阅读程序。在源代码中包含注释是极其重要的，注释提供了代码的背景信息以助于他人更快的理解代码。
- 两种语句，return 语句和 if...else语句。
- 递归。函数 *fib* 调用了它自己；这种形式的函数调用被称为递归调用。递归在C语言中是被允许的并且很常用。

函数 *fib* 如果不停的调用自己而不再某一时刻返回计算结果那么它将是一无是处的，所以定义递归函数时必须避免
无限递归。

函数 *fib* 中使用n是否小于或等于2作为递归终止的条件，所以最大递归次数是小于n的。


*** 函数头

在我们的例子中，使用前两行定义了函数头。函数头的目的是给函数一个在调用时使用的名字和如何调用它。

#+begin_src c
    int
    fib (int n)
#+end_src

上述代码定义了一个名叫 *fib* 并返回一个整数并且使用整数类型变量n作为实际参数数值传递的函数。

*** 函数体

函数定义中除去函数头剩下的部分被称为函数体。C语言的函数体必须写在一对大括号“{}”之间，函数体
可以为空或多行语句和声明。语句用来实现函数的功能，声明用来定义变量和函数的名称等。每一个语句和
生命都以分号";" 作为结束符。


语句和声明经常包含 *表达式*; 表达式是一种产生某种数据类型的数值的结构，但是