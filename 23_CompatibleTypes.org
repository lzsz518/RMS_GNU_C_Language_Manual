#+title: 兼容类型

在C语言中，只有在两个声明指定的类型是兼容的情况下，才可以有效地声明函数或变量两次。
此外，某些指针操作要求操作数具有兼容的目标类型。


在C语言中，两个不同的基本类型永远不兼容。同样适用于定义的结构体、联合体和枚举类型：除非它们以完全相同的方式定义，
否则两个单独定义的类型是不兼容的。

然而，也有一些情况下不同类型可以是兼容的：

 * 每个枚举类型都与某种整数类型兼容。在GNU C中，整数类型的选择取决于枚举值的最大值。
 * 如果数组的元素类型兼容且大小（如果指定了大小）相匹配，则数组类型是兼容的。
 * 如果指针的目标类型兼容，则指针类型是兼容的。
 * 如果函数类型指定了参数类型，并且返回类型兼容且参数类型逐个兼容，则它们是兼容的。此外，它们必须在是否使用...允许额外参数方面达成一致。
 * 如果函数类型没有指定参数类型，但返回类型是兼容的，那么它们是兼容的。
 * 如果指定的函数类型的参数类型未经参数提升（参见参数提升）修改，并且返回类型是兼容的，那么指定参数类型的函数类型与省略参数类型的函数类型是兼容的。

为了使类型兼容，它们必须在类型限定符上保持一致。因此，const int和int是不兼容的。
由此可见，const int *和int *也是不兼容的（它们是指向不兼容类型的指针）。

如果忽略类型限定符后两个类型是兼容的，我们称它们为几乎兼容（nearly compatible）。
对于数组类型，我们忽略元素类型上的限定符。在指针比较中，如果指针的目标类型几乎兼容，则比较是有效的。
同样，条件表达式的两个分支可以是指向几乎兼容目标类型的指针。

如果忽略类型限定符后两个类型是兼容的，并且第一个类型具有第二个类型的所有限定符，
我们称第一个类型向上兼容（upward compatible）于第二个类型。
指针的赋值要求被赋值的指针的目标类型向上兼容于右操作数（新值）的目标类型。
