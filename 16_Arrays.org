#+title: 数组

数组是一种存储一系列拥有相同类型的元素的数据对象。每一个数组中的元素都被给予一个数值索引。

我们在这个手册较早的部分曾经展示过存储数值的数组(详见4.2章)。然而数组可以存储任意数据类型的元素，
其中包括指针、结构体、联合体和其它数组。

如果了解其它编程语言那么你应该对于数组已经有了足够的了解，但是在C语言中数组有一些特性所以本章
我们就来阐述这些特性。

C语言数组中的元素都被存储在没有间隙的连续内存空间中，每一个元素都按照它的类型进行了对齐
(详见对齐章节)

* 访问数组元素

如果变量 *a* 是一个数组那么 *a[n]* 就是第n个元素。你可以使用这个表达式来访问元素中的值或给
元素赋值：

#+begin_src c
  x = a[5];
  a[6] = 1;
#+end_src

因为变量 *a* 是左值所以 *a[n]* 也是左值。

数组最小的索引是0而不是1，最大的数组索引是素组长度减1。

当代码使用一个超出范围的索引来访问数组时C语言并不会检测索引是否在索引的范围内，这将访问数组
之外的内存。

*警告* ： 在C语言中使用合法的索引时程序员的责任。

数组的索引在C语言中不是一个原生的操作： 它是以指针算术和解引用的形式来定义的。现在我们知道
了 *a[i]* 都做了什么，我们可以来了解 *a[i]* 如何工作。

在C语言中，x[y] 是 *(x+y) 的缩略语。因此 a[i] 的意思是 *(a+i)。详见指针于数组章节。

当一个较长的表达式中出现数组类型(例如a)那么它会被自动转换为指向索引为0的元素的指针。例如，*a*
在表达式中相当于 *&a[0]* 。因此，*(a+i) 相当于 *(&a[0]+i)。

现在我们可以分析一下这个表达式是如何给我们提供所需的数组元素的。通过一个指向*a*的0号索引的元素,
然后通过 *i* 计算它在数组中的偏移，最后对其进行解引用。

另一种等价的表达方式是（&a[0]）[i]。

* 声明数组

要声明数组，请在数组变量名之后书写 *[长度值]* 。这个结构在变量、函数参数、函数值类型（值不能是数组，但可以是指向数组的指针）、
结构体或联合体替代类型的声明中有效。

声明的前面部分指明了数组元素的类型；可以是除了 *void* 或 函数以外的任意类型。例如：

#+begin_src c
  double a[5];
#+end_src

上例声明 *a* 为一个长度为5的数组。

#+begin_src c
  struct foo bstruct[length];
#+end_src

声明 *bstruct* 为一个长度为length元素类型为struct foo的数组。 当数组作用域不是文件范围时，像这样的可变数组大小是允许的。


