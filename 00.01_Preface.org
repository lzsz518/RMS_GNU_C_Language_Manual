#+title: 前言

本手册将阐述如何在GNU/Linux 系统或其他系统上使用GNU 编译器合集进行C语言编程。我们把这种C语言编译器成为GNU C。如果你已经对C语言有所了解那么你可以将本手册当作为参考。

如果你了解基础的编程理论但是不了解C语言，你可以从头到尾阅读本手册来学习这门编程语言。

如果你是一个编程初学者，我们建议你从一门带有自动垃圾收集并且不带有指针的语言开始学习。建议选择Lisp,Scheme,Python和Java。C语言的指针意味着程序员必须非常小心的避免一些特定的错误。

C语言诞生于1973年，他是一门值得敬佩的语言。GNU C 编译器是在GNU 编译器合集创建之后加入的，在合集创立之初使用的是劳伦斯利弗莫尔国家实验室的C语言编译器。GNU C 的第一个
版本发布于1987年。其他流行的编程语言都是基于C语言设计的：在学习了C语言之后你会得到非常有用的基础知识以帮助继续学习例如：C++，C#，Java， Scala，D，Go和其他语言。

C语言最大的好处是他的语法相当简单并且允许访问计算机硬件，在其出现之前对于硬件的访问需要使用汇编语言和不同硬件特有的指令来实现。有人因为C语言的指针和缺乏自动内存管理而称其是
“高级汇编语言”，又如同一哥们说：“C语言结合了汇编语言的强大和便捷”。无论如何，C语言是一门比汇编语言更便于在平台间移植并且读写更简单的语言。

本手册将聚焦于GNU 编译器合集的GNU C 方言，版本???。（ 别奇怪，原文就是三个问号，可能RMS还没想好）当使用其他编译器构建本手册的程序出现不支持的特性或行为不同时我们会这样解释。
当手册中出现非标准(ISO)C 的部分我们会说这是“GNU C编译器的扩展”，因为其他方言和标准不在本手册讨论之内所以有必要知道上述原则。除非有必要我们不会扩展上述说明。出于相同的
原因我们并没有在手册中提到C++或其他GNU 编译器合集所支持的语言。

我们还会说：C语言的有些语义取决于他所处的目标平台，即编译后的代码将运行于何种指令集的计算机与何种操作系统。

C语言不内置任何函数库，例如输入/输出操作，内存管理，字符串操作。这些功能都在标准函数库中实现，任何完整C语言执行环境都包换标准函数库。详情请见[[https://www.gnu.org/software/libc/manual/html_mono/libc.html#Top][The GNU C Library]].

本手册包含过去已经存在于GNU手册中的GNU C 预处理手册。还使用了由Trevis Rothwell和James Youngman编写的早期GNU C手册中的一些文字。

GNU C 含有很多模糊不清的特征，这些特征的存在可能是为了兼容性也可能是为了一些非常特殊的情况。我们将把对于这些特征的阐述留在另一个配套手册中，这个配套手册将命名为GNU C 隐晦手册
(GNU C Obscurities Manual)，并将在晚些时候发布。
