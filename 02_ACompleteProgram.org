#+TITLE: 02 一个完整的程序

* 完整的程序

前面写了一个很棒的斐波拉契函数，它很有用但是不完整所以这个函数并不能在计算机上运行。

本章将展现一个计算斐波拉契数列第n项的完整计算机程序。展现的内容包括如何让一个程序开始，
结束和如何编译它并输入计算结果。

** 完整程序样例

现在来使用较简单的递归式斐波拉契函数来展现完整的程序：

#+begin_src c
  #include <stdio.h>
  int
  fib (int n)
  {
    if (n <= 2) /* This avoids infinite recursion. */
      return 1;
    else
      return fib (n - 1) + fib (n - 2);
  }

  int
  main (void)
  {
    printf ("Fibonacci series item %d is %d\n",
    20, fib (20));
    return 0;
  }
#+end_src

以上程序将打印斐波拉契数列第二十项的值。现在来解释这些代码的含义。

** 程序释义

这个简单的程序将打印 *fib(20)* 的值并返回整数0(程序执行成功时的标准返回值)

每一个C语言程序都将从 *main* 函数开始运行，无论 *main*函数具体做什么或整个程序
具体做什么，因此这个例子定义了它。

当程序启动时 *main* 函数将是第一个被调用的函数，但是在例子中它却没有被首先定义，
函数在源代码中的定义顺序对于程序的执行不会产生影响。

当程序开始执行时总是会传递特定的参数给 *main* 函数，但是 *main* 函数并不是必须
使用这些参数。为了忽略参数需要在参数列表中使用 *void* 关键字。(*void* 作为参数列表
意味着调用函数时不传递参数，但是 *main* 函数是个特例)

*main* 函数返回整数0是因为这是最传统的方式来表明函数执行成功，当程序执行失败时可以使用
其他的整数表明程序执行失败，一些实用程序会约定一些特定的返回数值来表明函数失败的原因。

在C语言中最简单的字符输出方式是调用 /printf/ 函数，我们来解释一下他的作用。

为了输出信息，/printf/ 函数的第一个参数是一个带有模板的字符串常量。 /printf/ 函数将
直接拷贝字符串常量中包括换行符在内的大部分内容并输出到 /标准输出/ 目标，目标通常是命令行
窗口。
