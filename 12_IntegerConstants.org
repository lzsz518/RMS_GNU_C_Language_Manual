#+title: 12 常数

常数是显式呈现恒定值的表达式。C语言允许的常量类型有数值，字符和字符串。前面已经使用过数值和字符串常量。

** 整型常数

整型常数是一个指定的数值并且通过字符后缀指定常量为哪种类型的整数。

最简单的整型常数是十进制数字，例如 5，77，403。十进制整型常数不能以字符'0'开始因为这让它变成八进制数。

你可以给整型常数前面加上负号让它变成一个负数。从语法上讲这将使其成为一个算术表达式而不是常量，但是它
的行为和真正的常数一样。

常数也能以八进制，十六进和二进制形式表示。八进制常量以字符'0'作为前缀，之后是任意数量的八进制数('0'--'7'):

#+begin_src c
  0      // zero
  077    // 63
  0403   // 259
#+end_src

如果非要咬文嚼字，常数 *0* 是一个八进制常数，但是也可以认为它是一个十进制常数，尽管不论那种进制它的值都是相同的。

十六进制常量以字符'0x'(x 大小写均可)作为前缀，之后是任意十六进制数('0'--'9','a'--'f'大小写均可)：

#+begin_src c
  0xff   // 255
  0XA0   // 160
  0xffFF // 65535
#+end_src

二进制常数以字符'0b'(大小写均可)，之后是任意二进制数('0'--'1')：

#+begin_src c
  0b101   // 5
#+end_src

二进制常数仅仅被GNU C支持，它并不被标准C支持。

有些时候整型常数后面需要一个空格以防止与后续标记产生歧义。详情请见非法数值。

** 整型常数类型

一般情况下如果整型常数的大小适合与 *int* 型那么这就是它的类型，但是对于如何决定类型仍然存在完整的规则。
一个整型常数的类型是一下列表中第一个可以正确存储该值的类型：

 1. int
 1. unsigned int
 1. long int
 1. unsigned long int
 1. long long int
 1. unsigned long long int

对以上列表还有下面的例外规则：

 * 如果常数后缀为'l'或'L'，忽略列表前两项
 * 如果常数后缀为'll'或'LL'，忽略列表前四项
 * 如果常数后缀为'u'或'U'，忽略所有有符号项
 * 如果常数是十进制的，忽略无符号项

例如：

#+begin_src c
  3000000000u      // three billion as unsigned int.
  0LL              // zero as a long long int.
  0403l            // 259 as a long int.
#+end_src 

整型常数中的后缀很少使用。当类型的精确性很重要时使用显示类型转换是明智的选择。详情请见显示类型准换与整数类型章节。
