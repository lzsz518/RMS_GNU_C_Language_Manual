#+Title: 14 指针

在高级计算机语言之中，C语言的抽象程度较低并且可以更直接的操作计算机硬件，这主要是因为它拥有显式的指针。
指针变量的值是一个数据在内存中的地址，这个地址中所存储的数据的类型是由持有这个地址的指针的类型决定的。
可以使用一元操作符'*' 获取指针指向的内存地址的数据，这个操作被称为指针解引用。

C语言也允许指针指向函数，但是这与指向数据的指针有所不同所以我们晚些讨论这个问题。详见函数指针章节。

* 数据地址

获取指针最简单的方法是使用"取地址" 操作符 *'&'* 。让我们假设为本拥有一下变量：

#+begin_src
  int i;
  double a[5];
#+end_src

现在， *&i* 将得到变量 *i* 的地址--一个指向 *i* 的内存地址的指针， *&a[3]* 将得到数组 *a* 索引为3的元素
的内存地址。(实际上索引为3的元素是数组的第四个元素，因为索引是从0开始计数的)

取地址操作符并不常见因为它只对存储数值的地方(内存地址，左值。详见左值章节)进行操作而不是那个地址中所存储的数值。
(简单赋值的左参数以同样的原因不常见.) 你可以在任何期望得到位域或(详见位域章节)构造器的地方使用它。(详见结构体构造器)

* 指针类型

每一个数据类型 /t/ 都有对应的指针类型。对于以下变量：

#+begin_src c
  int i;
  double a[5];
#+end_src

 * 变量 *i* 是 *int* 型； 我们可以是说 *&i* 是一个"直指向int的指针"。
 * 变量 *a* 是double[5]型； 我们可以说 *&a* 是一个"指向拥有五个double元素数组的指针"。
 * 变量 *a[3]* 是double型；我们可以说 *&a[3]* 是一个"指向double的指针"。

* 声明指针变量

将变量 *foo* 声明为 /t/ 类型的指针的方法是：

#+begin_src c
  t *foo;
#+end_src

为了便于记忆，请这样理解："如果使用解引用操作符 *'*'* 解引用变量 *foo* ，你将得到它的类型 /t/ , 因此
*foo* 是指向 类型 /t/ 的指针。"

因此我们可声明指针变量来存储以下三个类型变量的地址：

#+begin_src c
  int *ptri;            /* Pointer to int. */
  double *ptrd;         /* Pointer to double. */
  double (*ptrda)[5];   /* Pointer to double[5]. */
#+end_src

*'int *ptri;'* 的意思是："如果解引用 *ptri* 将得到一个int类型的变量"。 *'double (*ptrda)[5];'*
的意思是："如果解引用 *ptrda* 之后便可以使用小于5的索引来使用它以得到一个double类型的数值"。小括号
的作用是使变量 *ptrda* 可以先被解引用然后再引用其中的元素。

对比上面最有一个语句与以下语句：

#+begin_src c
  double *aptrd[5];     /* Array of five pointers to double. */
#+end_src

因为 *'*'* 在句法上的优先级比下标([5])更高，你必须先进行下标引用才能解引用 *aptrd* 。因此，上面的
声明是一个指针数组而不是一个指针。

* 指针类型指定器

C语言中的每种变量类型都有类型指定器；你可以通过从变量声明中删除变量名和分号来得到它(详见变量指定器章节)。
下面是前面章节出现过的变量声明中的指针类型指定器：

#+begin_src c
  int *           /* Pointer to int. */
  double *        /* Pointer to double. */
  double (*)[5]   /* Pointer to double[5]. */
#+end_src

请记住，想知道一个类型的指定器将指定变量为什么类型，请想象一下声明中的变量名并且研究清楚变量被声明为什么类型。
double(*)[5]只能作为 double(*variable)[5]的指定器，所以在对他进行解引用后会得到一个指向5个double元素数组
的指针。

* 解引用指针

指针的主要用途是使用一元操作符'*'对它进行 /解引用/ (访问指针所指的数据)。例如，*&i是变量i所在地址的值，这就是
i本身，它们两个是等价的，这也证明了&i是可用的。

指向数据的指针解引用表达式(不能是指向函数的指针)是一个左值。

指针的真正作用是把他们存储起来并在晚些时候使用。以下是一个简单的例子对此进行说明：

#+begin_src c
  {
    int i;
    int *ptr;

    ptr = &i;

    i = 5;

    …

    return *ptr;   /* Returns 5, fetched from i.  */
  }
#+end_src

上例展示了如何声明变量ptr为 int * 类型(指向int的指针)，存储一个指针值到prt中(变量i的内存地址)，然后稍晚时候使用
这个指针来取得它所指向地址中所存储的数值(变量i的数值)。

如果任何人能提供一个比这还基础的例子我将万分感谢。
